// Google Ads MCC Script: User Location Click & Impression Report
// Generated by AI

// Optional: Provide a sheet URL. If empty, a new sheet will be created.
const SHEET_URL = ''; 
const TAB_NAME = 'MCC_User_Location_Report';
const ACCOUNT_LABEL = 'CM - Kurt';

// GAQL Query to find clicks and impressions by user's actual geographic location
const GAQL_QUERY = `
    SELECT
        user_location_view.country_criterion_id,
        metrics.impressions,
        metrics.clicks
    FROM user_location_view
    WHERE
        metrics.impressions > 0
        AND segments.date DURING LAST_7_DAYS
    ORDER BY metrics.impressions DESC, metrics.clicks DESC
`;

function main() {
    let spreadsheet;
    if (!SHEET_URL) {
        spreadsheet = SpreadsheetApp.create("MCC User Location Click & Impression Report");
        Logger.log("New spreadsheet created: " + spreadsheet.getUrl());
    } else {
        try {
            spreadsheet = SpreadsheetApp.openByUrl(SHEET_URL);
        } catch (e) {
            Logger.log("Error opening spreadsheet by URL: " + e + ". Creating a new one as fallback.");
            spreadsheet = SpreadsheetApp.create("MCC User Location Report (Fallback)");
            Logger.log("Fallback spreadsheet created: " + spreadsheet.getUrl());
        }
    }

    let sheet = spreadsheet.getSheetByName(TAB_NAME);
    if (!sheet) {
        sheet = spreadsheet.insertSheet(TAB_NAME);
    } else {
        sheet.clearContents(); // Clear existing content if sheet exists
    }

    const headers = ["Account Name", "User Country Criterion ID", "Impressions", "Clicks"];
    sheet.appendRow(headers); // Write headers once

    let nextRowToWrite = 2; // Start writing data from row 2
    let accountsProcessed = 0;
    let totalRowsWrittenAcrossAccounts = 0;

    const accountSelector = MccApp.accounts()
        .withCondition("LabelNames CONTAINS '" + ACCOUNT_LABEL + "'")
        .get();

    Logger.log("Starting MCC script for accounts with label: " + ACCOUNT_LABEL);

    while (accountSelector.hasNext()) {
        const account = accountSelector.next();
        const accountName = account.getName();
        Logger.log("Processing account: " + accountName + " (ID: " + account.getCustomerId() + ")");
        MccApp.select(account);
        accountsProcessed++;

        try {
            // Log sample row for field name verification for the current account
            const sampleQuery = GAQL_QUERY + ' LIMIT 1';
            const sampleReport = AdsApp.search(sampleQuery);
            if (sampleReport.hasNext()) {
                const sampleRow = sampleReport.next();
                Logger.log("Sample row structure for account " + accountName + ": " + JSON.stringify(sampleRow));
                if (sampleRow.metrics) {
                    Logger.log("Sample metrics object: " + JSON.stringify(sampleRow.metrics));
                }
                if (sampleRow.userLocationView) {
                    Logger.log("Sample userLocationView object: " + JSON.stringify(sampleRow.userLocationView));
                }
            } else {
                Logger.log("Sample query returned no rows for account: " + accountName);
            }

            const report = AdsApp.search(GAQL_QUERY);
            const accountRows = processAccountRows(report, accountName);
            
            if (accountRows.length > 0) {
                sheet.getRange(nextRowToWrite, 1, accountRows.length, headers.length).setValues(accountRows);
                Logger.log(accountRows.length + " rows from account '" + accountName + "' written to sheet.");
                nextRowToWrite += accountRows.length;
                totalRowsWrittenAcrossAccounts += accountRows.length;
            } else {
                Logger.log("No data found for account '" + accountName + "'.");
            }
        } catch (e) {
            Logger.log("Error processing account " + accountName + ": " + e);
        }
    }

    if (totalRowsWrittenAcrossAccounts > 0) {
        Logger.log(totalRowsWrittenAcrossAccounts + " total rows of user location data written to sheet: " + TAB_NAME);
    } else {
        Logger.log("No user location data found in any processed accounts with label '" + ACCOUNT_LABEL + "'.");
        if (accountsProcessed > 0) {
             sheet.appendRow(["No data found for any processed accounts."]); // Add a note if accounts were processed but no data
        }
    }
    Logger.log("MCC User Location Report script finished. Processed " + accountsProcessed + " account(s).");
}

function processAccountRows(reportIterator, accountName) {
    const accountData = [];
    while (reportIterator.hasNext()) {
        const row = reportIterator.next();
        try {
            const metrics = row.metrics || {};
            const clicks = Number(metrics.clicks) || 0;
            const impressions = Number(metrics.impressions) || 0;
            
            const userLocationView = row.userLocationView || {};
            const countryCriterionId = userLocationView.countryCriterionId || 'N/A';

            accountData.push([
                accountName,
                countryCriterionId,
                impressions,
                clicks
            ]);
        } catch (e) {
            Logger.log(`Error processing row in account ${accountName}: ${e}. Row data: ${JSON.stringify(row)}`);
        }
    }
    return accountData;
} 