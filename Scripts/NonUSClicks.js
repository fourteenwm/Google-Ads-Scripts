// Google Ads Script: User Location Click & Impression Report
// Generated by AI

// Optional: Provide a sheet URL. If empty, a new sheet will be created.
const SHEET_URL = '';
const TAB_NAME = 'User_Location_Report';

// GAQL Query to find clicks and impressions by user's actual geographic location (aggregated)
const GAQL_QUERY = `
    SELECT
        user_location_view.country_criterion_id,
        metrics.impressions,
        metrics.clicks
    FROM user_location_view
    WHERE
        metrics.impressions > 0
        AND segments.date DURING LAST_30_DAYS
    ORDER BY metrics.impressions DESC, metrics.clicks DESC
`;

function main() {
    let spreadsheet;
    if (!SHEET_URL) {
        spreadsheet = SpreadsheetApp.create("User Location Click & Impression Report");
        Logger.log("New spreadsheet created: " + spreadsheet.getUrl());
    } else {
        try {
            spreadsheet = SpreadsheetApp.openByUrl(SHEET_URL);
        } catch (e) {
            Logger.log("Error opening spreadsheet by URL: " + e);
            spreadsheet = SpreadsheetApp.create("User Location Report (Fallback)");
            Logger.log("Fallback spreadsheet created: " + spreadsheet.getUrl());
        }
    }

    let sheet = spreadsheet.getSheetByName(TAB_NAME);
    if (!sheet) {
        sheet = spreadsheet.insertSheet(TAB_NAME);
    }
    sheet.clearContents();

    const headers = ["User Country Criterion ID", "Impressions", "Clicks"];
    sheet.appendRow(headers);

    Logger.log("Executing query: " + GAQL_QUERY);

    // Log sample row for field name verification
    try {
        const sampleQuery = GAQL_QUERY + ' LIMIT 1';
        const sampleRows = AdsApp.search(sampleQuery);
        if (sampleRows.hasNext()) {
            const sampleRow = sampleRows.next();
            Logger.log("Sample row structure: " + JSON.stringify(sampleRow));
            if (sampleRow.metrics) {
                Logger.log("Sample metrics object: " + JSON.stringify(sampleRow.metrics));
            }
            if (sampleRow.segments) { // Segments are relevant for date
                Logger.log("Sample segments object: " + JSON.stringify(sampleRow.segments));
            }
            if (sampleRow.userLocationView) {
                Logger.log("Sample userLocationView object: " + JSON.stringify(sampleRow.userLocationView));
            }
        } else {
            Logger.log("Sample query returned no rows.");
        }
    } catch (e) {
        Logger.log("Error fetching sample row: " + e);
    }

    const report = AdsApp.search(GAQL_QUERY);
    const processedData = processRows(report);

    if (processedData.length > 0) {
        sheet.getRange(2, 1, processedData.length, headers.length).setValues(processedData);
        Logger.log(processedData.length + " rows of user location data written to sheet: " + TAB_NAME);
    } else {
        Logger.log("No user location data found matching the criteria.");
        sheet.appendRow(["No user location data found."]);
    }
}

function processRows(rowsIterator) {
    const data = [];
    while (rowsIterator.hasNext()) {
        const row = rowsIterator.next();
        try {
            const metrics = row.metrics || {};
            const clicks = Number(metrics.clicks) || 0;
            const impressions = Number(metrics.impressions) || 0;
            
            const userLocationView = row.userLocationView || {};
            const countryCriterionId = userLocationView.countryCriterionId || 'N/A';

            data.push([
                countryCriterionId,
                impressions,
                clicks
            ]);
            
        } catch (e) {
            Logger.log(`Error processing row: ${e}. Row data: ${JSON.stringify(row)}`);
        }
    }
    return data;
} 