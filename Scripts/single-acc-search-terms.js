// Google Ads Script: Single Account Search Terms Report
// Generated by AI

// User-configurable: Paste your Google Sheet URL here.
// If left empty, a new sheet will be created and its URL logged.
const SHEET_URL = '';
const TAB_NAME = 'Search Terms Report';

// GAQL Query for the last 30 days.
// Fetches search terms, campaign, ad group, and performance metrics.
// Orders by cost in descending order.
const QUERY = `
  SELECT
    search_term_view.search_term,
    campaign.name,
    ad_group.name,
    metrics.impressions,
    metrics.clicks,
    metrics.cost_micros,
    metrics.conversions,
    metrics.conversions_value
  FROM search_term_view
  WHERE segments.date DURING LAST_30_DAYS
    AND campaign.status = "ENABLED"      // Consider only active campaigns
    AND ad_group.status = "ENABLED"        // Consider only active ad groups
    AND metrics.impressions > 0          // Only include search terms with impressions
  ORDER BY metrics.cost_micros DESC
`;

function main() {
  let spreadsheet;
  if (!SHEET_URL) {
    spreadsheet = SpreadsheetApp.create("Search Terms Report - Single Account");
    Logger.log("Sheet URL not provided. Created new sheet: " + spreadsheet.getUrl());
  } else {
    try {
      spreadsheet = SpreadsheetApp.openByUrl(SHEET_URL);
    } catch (e) {
      Logger.log("Error opening spreadsheet by URL: " + SHEET_URL + ". Error: " + e);
      Logger.log("Creating a new sheet instead.");
      spreadsheet = SpreadsheetApp.create("Search Terms Report - Single Account (Fallback)");
      Logger.log("Created new sheet: " + spreadsheet.getUrl());
    }
  }

  let sheet = spreadsheet.getSheetByName(TAB_NAME);
  if (!sheet) {
    sheet = spreadsheet.insertSheet(TAB_NAME);
  }
  sheet.clearContents();

  Logger.log("Fetching search terms data...");
  const report = AdsApp.search(QUERY);

  // Log sample row for field name verification (as per mega.md guidelines)
  const sampleQuery = QUERY + ' LIMIT 1';
  const sampleRows = AdsApp.search(sampleQuery);
  if (sampleRows.hasNext()) {
    const sampleRow = sampleRows.next();
    Logger.log("Sample row structure: " + JSON.stringify(sampleRow));
    if (sampleRow.metrics) {
      Logger.log("Sample metrics object: " + JSON.stringify(sampleRow.metrics));
    }
    if (sampleRow.campaign) {
      Logger.log("Sample campaign object: " + JSON.stringify(sampleRow.campaign));
    }
    if (sampleRow.adGroup) {
      Logger.log("Sample adGroup object: " + JSON.stringify(sampleRow.adGroup));
    }
     if (sampleRow.searchTermView) {
      Logger.log("Sample searchTermView object: " + JSON.stringify(sampleRow.searchTermView));
    }
  } else {
    Logger.log("Query returned no rows for sample check. Ensure your account has data for the selected criteria.");
    sheet.appendRow(["Query returned no data."]);
    return;
  }

  const rows = [];
  const headers = [
    "Search Term", "Campaign", "Ad Group",
    "Impressions", "Clicks", "Cost", "Conversions", "Conversion Value",
    "CPC", "CTR", "Conv. Rate", "CPA", "ROAS", "AOV"
  ];
  rows.push(headers);

  Logger.log("Processing rows...");
  while (report.hasNext()) {
    const row = report.next();
    try {
      // Access dimensions (camelCase)
      const searchTerm = row.searchTermView.searchTerm;
      const campaignName = row.campaign.name;
      const adGroupName = row.adGroup.name;

      // Access metrics (camelCase), convert to numbers, and handle nulls
      const metrics = row.metrics || {};
      const impressions = Number(metrics.impressions) || 0;
      const clicks = Number(metrics.clicks) || 0;
      const costMicros = Number(metrics.costMicros) || 0;
      const conversions = Number(metrics.conversions) || 0;
      const conversionsValue = Number(metrics.conversionsValue) || 0; // Note: conversionsValue

      // Calculate metrics
      const cost = costMicros / 1000000; // Convert micros to currency
      const cpc = clicks > 0 ? cost / clicks : 0;
      const ctr = impressions > 0 ? clicks / impressions : 0;
      const convRate = clicks > 0 ? conversions / clicks : 0;
      const cpa = conversions > 0 ? cost / conversions : 0;
      const roas = cost > 0 ? conversionsValue / cost : 0;
      const aov = conversions > 0 ? conversionsValue / conversions : 0;

      rows.push([
        searchTerm, campaignName, adGroupName,
        impressions, clicks, cost, conversions, conversionsValue,
        cpc, ctr, convRate, cpa, roas, aov
      ]);
    } catch (e) {
      Logger.log("Error processing row: " + e + " | Row data: " + JSON.stringify(row));
      // Continue with the next row
    }
  }

  if (rows.length > 1) { // More than just headers
    sheet.getRange(1, 1, rows.length, headers.length).setValues(rows);
    Logger.log("Report successfully written to sheet: " + spreadsheet.getUrl());
    Logger.log(rows.length -1 + " rows of data processed.");
  } else {
    sheet.appendRow(["No data found for the given criteria."]);
    Logger.log("No data found to write to the sheet after processing.");
  }
}
